/*! \mainpage Rutas aéreas

# Introducción
Esta práctica desarrolla un software para ayudar a una compañía aérea
poder visualizar sus rutas. En concreto la empresa aérea quiere visualizar en un mapa del mundo
rutas con un código determinado.

Recibiendo los datos necesarios este programa muestra en un mapa la ruta indicada en un mapa, mostrando
los países en los que hace paradas y varios aviones para mostrar las trayectorias.

En lo respectivo al desarrollo del programa se crean diferentes clases usando las mejores estructuras de
datos para encontrar la solución más eficiente.

## Programa principal
El programa principal **ruta_aerea.cpp** es el encargado de la ejecución de todo el proyecto.
> __ruta_aérea__ \<Datos de países\> \<mapa global\> \<directorio banderas\> \<almacén rutas\> \<avión\> \<mascara avión\> \<dir salida imagen\>

@image html Ruta1.png "Salida al seleccionar la ruta 1"

## Desarrollo de clases
Todas las clases creadas están pensadas de la forma más eficiente y usando la mejor metodología encontrada.
Las clases que contengan atributos de TDA no lineales tienen ademas creadas clases iteradoras tanto Iterator como const_iterator si es necesario.


### Clase Punto
Esta clase crea un objeto con dos atributos, *X* e *Y* que representan las coordenadas en la imagen.
Además de los getter y setter necesarios hemos creado dos métodos que nos permiten transformar el punto según interese,
estos métodos son **coordenadas_aPunto** y **punto_aCoordenadas** que realizan las acciones de transformar el punto según se necesite.

### Clase Ruta
La clase Ruta tiene un vector que almacena todos los puntos de una ruta.
En cuanto al desarrollo de esta clase sus métodos permiten tratamiento del vector como se necesite.

### Clase AlmacenRuta
Esta clase tiene un map<string, Ruta> que contiene cada una de las rutas recibidas en el fichero.
Para el almacenamiento de estas rutas uno de los constructores permite la entrada de un fichero directamente
para guardar sus datos.

Al igual que la clase Ruta esta clase tiene todos los métodos necesarios para la edición de los datos del map.

### Clase Pais
Esta clase almacena todos los datos necesarios de un país como son el nombre, la ruta de la imagen de la bandera
y su ubicación en el mapa(Punto). La primera vez que se usa el método **Bandera** se genera un dato **Imagen** que contendrá la imagen de la bandera,
para así evitar almacenar en memoria la imagen completa cargada de todos los países y almacenar solo las utilizadas.

### Clase Paises
Tiene un set de objetos de la clase Pais. Esta clase tiene un constructor que puede recibir por parámetro el fichero del que se obtienen los datos
de los países a insertar. Ordena los países por orden alfabético, para ello se sobrecargo el operador menor que en la clase Pais.

### Clase Pixel
Esta clase contiene tres datos del tipo unsigned char para almacenar los valores de cada pixel de rojo, verde y azul.
En nuestro código decidimos no añadirle la trasparencia de dicho pixel para así poder hacer un programa más eficiente.
Al no tener la trasparencia dentro de cada objeto de tipo pixel nos permitimos el almacenar la máscara de cada imagen como un unsigned char**,
lo que nos permite asignarle nullptr en caso de que la imagen no contenga ninguna máscara (como las banderas o el mapa).
También nos permite mejorar la eficiencia en la clase Imagen debido a que para manejar el buffer de entrada y salida podemos hacer un "cast" de unsigned char
y como en memoria se almacena igual (un unsigned char para rojo otro para verde y otro para azul, contiguos en memoria) evitamos conversiones para asignar la trasparencia
que podrían hacer el programa bastante más lento, sin embargo también se podría hacer introduciendo otro unsigned char para la trasparencia pero por dichas razones preferimos hacerlo así.

### Clase Imagen
Esta clase contiene una matriz de pixeles, dos enteros para almacenar el numero de filas y columnas y un unsigned char** para almacenar la máscara de la imagen.
También tiene en el mismo fichero definido el enum **Tipo de pegado**, tiene algunas modificaciones respecto al esquema dado por el profesor,
estas variaciones quedan explicadas en el apartado interior, donde justificamos el uso de una matriz de unsigned char para la máscara de la imagen.

### Clase ImagenES
Aunque no se trate propiamente de una clase, sino de un conjunto de funciones dadas por el profesor,
estas son esenciales para el funcionamiento del programa. No han sido manipuladas por nosotros, sin embargo he de advertir que a la hora de leer una imagen,
en el caso de que la ruta sea incorrecta el error que dara será "La imagen no tiene el formato PPM" debido a que a la hora de leer la cabecera de la imagen el formato
que se obtiene es "formato desconocido", esto se podría arreglar introduciento un else al if(f) en vez de devolviendo tipo de imagen desconocido.
Sin embargo como he dicho este archivo no ha sido modificado y es idéntico al proporcionado por el profesor.

@htmlonly
<div id = "footer">
  <p>Hecho por: <a href="https://github.com/javilj03">Javier Lama Jiménez</a> y <a href="https://github.com/IvanFrison">Ivan Rodríguez Chacón</a></p>
  <p><a href="https://github.com/javilj03/PracticaFinal_ED">Repositorio</a></p>
</div>
@endhtmlonly



*/